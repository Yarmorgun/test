
#include <map>
#include <thread>
#include <mutex>
#include <memory>

template <class T>
class TemplateStorageKeeper
{
	TemplateStorageKeeper() {};
	~TemplateStorageKeeper() {};
	std::mutex classMutex;
	std::map<std::thread::id, T*> m_storages;
	template<class T> friend class TemplateStorage;
	void AddStorage(T* storage)
	{
		std::thread::id thisThreadId = std::this_thread::get_id();
		{
			std::unique_lock<std::mutex> lock(classMutex);
			if (m_storages.count(thisThreadId) == 0)
			{
				m_storages[thisThreadId] = storage;
			}
		}
	};
	void RemoveStorage()
	{
		std::thread::id thisThreadId = std::this_thread::get_id();
		{
			std::unique_lock<std::mutex> lock(classMutex);
			m_storages.erase(thisThreadId);
		}
	}
public:
	static TemplateStorageKeeper& Get()
	{
		static TemplateStorageKeeper singleton;
		return singleton;
	};
	T* GetStorage()
	{
		std::thread::id thisThreadId = std::this_thread::get_id();
		return m_storages[thisThreadId];
	};
};

template <class T>
class TemplateStorage
{
public:
	TemplateStorage()
	{
		TemplateStorageKeeper<T>::Get().AddStorage(static_cast<T*>(this));
	}
	~TemplateStorage()
	{
		TemplateStorageKeeper<T>::Get().RemoveStorage();
	}
};


class Storage: public TemplateStorage<Storage>
{
	int someStore;
public:
	Storage() 
	{
		someStore = 0;
	}
	void setData(const int i) { someStore = i; };
	int getData()const { return someStore; };
};

class Keeper : public TemplateStorageKeeper<Storage>
{

};
